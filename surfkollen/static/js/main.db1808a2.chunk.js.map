{"version":3,"sources":["assets/surfkollen-logo.png","components/Header.js","components/Footer.js","assets/Pexels Videos 1918465.mp4","components/pages/Places.js","components/pages/About.js","components/pages/Detail.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","logo","alt","Component","Footer","exact","to","Places","surfCities","jsonData","bgVideo","BackgroundVideo","map","item","key","cityid","name","muted","autoPlay","loop","type","About","withRouter","href","Detail","props","state","isLoaded","weatherInfo","error","id","fetch","then","response","json","data","setState","catch","this","fetchData","match","params","Fragment","Math","round","wind","speed","goodWave","badWave","main","temp","weather","icon","description","charAt","toUpperCase","slice","App","render","location","TransitionGroup","CSSTransition","timeout","classNames","path","component","pathname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"mjBAAe,MAA0B,4CCM5BA,EAAb,uKAEQ,OACI,8BACI,wBAAQC,UAAU,mBAAlB,SACA,qBAAKC,IAAKC,EAAMF,UAAU,cAAcG,IAAI,iBAL5D,GAA4BC,aCFfC,EAAb,uKAIQ,OACI,iCACI,8BACI,+BACI,6BAAI,cAAC,IAAD,CAASC,OAAK,EAACC,GAAG,IAAlB,qBACJ,6BAAI,cAAC,IAAD,CAASA,GAAG,UAAZ,6BAT5B,GAA4BH,aCJb,MAA0B,kD,QCO5BI,EAAb,uKAKQ,IAAMC,EAAaC,EAGbC,EAAUC,EAEhB,OACI,sBAAKZ,UAAU,OAAf,UACI,kCACI,qBAAKA,UAAU,SAAf,SAGCS,EAAWI,KAAI,SAACC,EAAMC,GAAP,OACZ,6BAAc,cAAC,IAAD,CAAMR,GAAE,kBAAaO,EAAKE,QAA1B,SAAqCF,EAAKG,QAA/CF,UAMb,wBAAOf,UAAU,kBAAkBkB,OAAK,EAACC,UAAQ,EAACC,MAAI,EAAtD,UACI,wBAAQnB,IAAKU,EAASU,KAAK,cAC3B,wBAAQpB,IAAKU,EAASU,KAAK,wBAzBnD,GAA4BjB,aCLfkB,GDsCEC,YAAWf,GCtC1B,uKAGQ,OACQ,qBAAKR,UAAU,OAAf,SACI,kCACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,eAAf,SACI,sCAEJ,wFAA8C,mBAAGwB,KAAK,iCAAR,8BAA9C,iJACA,oBAAGxB,UAAU,SAAb,+BAAwC,mBAAGwB,KAAK,mEAAR,8BAAxC,QAA4I,mBAAGA,KAAK,0BAAR,kCAXxK,GAA2BpB,cCCdqB,EAAb,kDAGI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACbC,UAAU,EACVC,YAAa,GACbC,MAAO,MALQ,EAHvB,sDAacC,GAAK,IAAD,OACVC,MAAM,sDAAD,OAAuDD,EAAvD,iEACJE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKC,SAAU,CACXR,YAAaO,EACbR,UAAU,OAKjBU,OAAO,SAAAR,GAAK,OACT,EAAKO,SAAU,CACXP,QACAF,UAAU,SA3B1B,0CAiCQW,KAAKC,UAAUD,KAAKb,MAAMe,MAAMC,OAAOX,MAjC/C,+BAqCa,MAKUQ,KAAKZ,MAFbC,EAHF,EAGEA,SACDC,EAJD,EAICA,YACAC,EALD,EAKCA,MAMN,OAGI,cADA,CACC,IAAMa,SAAP,WAEKb,EAAQ,8BAAIA,EAAJ,yBAAoC,KAG3CF,EAgCE,qBAAK5B,UAAU,OAAf,SACI,kCACI,+CAjCR,qBAAKA,UAAU,OAAf,SACI,kCACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,eAAf,UAE4B,UAAtB6B,EAAYZ,KAAoB,0CAAoB,KAC9B,YAAtBY,EAAYZ,KAAsB,2CAAqB,KACjC,kBAAtBY,EAAYZ,KAAsB,0CAAiB,KAC7B,UAAtBY,EAAYZ,KAAoB,0CAAoB,KAC9B,iBAAtBY,EAAYZ,KAAwB,yCAAgB,KAC9B,eAAtBY,EAAYZ,KAAyB,qCAAe,KAC9B,WAAtBY,EAAYZ,KAAkB,wCAAe,QAInD,gDAAe,mCAAS2B,KAAKC,MAAiC,GAA1BhB,EAAYiB,KAAKC,OAAa,GAAnD,UACblB,EAAYiB,KAAKC,OAAU,GAAKC,kEAAqBC,qEAGvD,sBAAKjD,UAAU,eAAf,UACI,+BAAK4C,KAAKC,MAAMhB,EAAYqB,KAAKC,MAAjC,YACA,qBAAKnD,UAAU,YAAf,SAA2B,qBAAKC,IAAG,2CAAsC4B,EAAYuB,QAAQ,GAAGC,KAA7D,WAA4ElD,IAAI,mBACnH,6BAAM0B,EAAYuB,QAAQ,GAAGE,YAAaC,OAAO,GAAGC,cAAiB3B,EAAYuB,QAAQ,GAAGE,YAAaG,MAAM,QAEnH,cAAC,IAAD,CAAMlD,GAAG,IAAT,oCAjFhC,GAA4BH,aAmGbmB,YAAWE,G,MC5DXiC,MAzBf,WACE,OACE,cAAC,IAAD,UACE,gCACE,cAAC,EAAD,IAEF,qBAAK1D,UAAU,OAAf,SACA,cAAC,IAAD,CAAO2D,OAAQ,gBAAEC,EAAF,EAAEA,SAAF,OACb,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAsCC,QAAS,IAAKC,WAAW,aAA/D,SACE,eAAC,IAAD,CAAQJ,SAAUA,EAAlB,UACE,cAAC,IAAD,CAAOK,KAAK,IAAI3D,OAAK,EAAC4D,UAAW3C,YAAWf,KAC5C,cAAC,IAAD,CAAOyD,KAAK,SAASC,UAAW3C,YAAWD,KAC3C,cAAC,IAAD,CAAO2C,KAAK,cAAcC,UAAW3C,YAAWE,SAJhCmC,EAASO,iBAUjC,cAAC,EAAD,UCxBSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASjB,OACP,cAAC,IAAMkB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.db1808a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/surfkollen-logo.36f0c102.png\";","import React, { Component } from 'react';\n\n/* assets */\nimport logo from '../assets/surfkollen-logo.png';\n\n\nexport class Header extends Component {\n    render() {\n        return (\n            <div>\n                <header className=\"header-container\">\n                <img src={logo} className=\"header-logo\" alt=\"logo\" />\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default Header","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\n\n\nexport class Footer extends Component {\n\n    render(){\n\n        return(\n            <footer>\n                <nav>\n                    <ul>\n                        <li><NavLink exact to=\"/\">Orter</NavLink></li>\n                        <li><NavLink to=\"/about/\">Om</NavLink></li>\n                    </ul>\n                </nav>\n            </footer>\n        );\n    }\n}\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/Pexels Videos 1918465.3956121e.mp4\";","import React, { Component } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\n\n/* assets */\nimport BackgroundVideo from '../../assets/Pexels Videos 1918465.mp4';\nimport jsonData from '../../assets/surfCities.json';\n\nexport class Places extends Component {\n\n    render() {\n        \n        /* variabel med data från lokal json */\n        const surfCities = jsonData;\n\n        /* variabel med data från lokal video */\n        const bgVideo = BackgroundVideo;\n       \n        return (\n            <div className=\"main\">\n                <section>\n                    <div className=\"places\">\n                        \n                    {/* visa all data från json */}\n                    {surfCities.map((item, key) => \n                        <h1 key={key}><Link to={`/detail/${item.cityid}`}>{item.name}</Link></h1>\n                    )}\n                    </div>\n                </section>\n\n                    {/* bakgrundsvideo */}\n                    <video className=\"videoBackground\" muted autoPlay loop>\n                        <source src={bgVideo} type=\"video/mp4\"/>\n                        <source src={bgVideo} type=\"video/ogg\"/>\n                    </video>\n            </div>\n            \n        )\n    }\n}\n\nexport default withRouter(Places)","import React, { Component } from 'react';\n\nexport class About extends Component {\n    render() {\n\n        return (\n                <div className=\"main\">\n                    <section>\n                        <div className=\"card\">\n                            <div className=\"card-heading\">\n                                <h1>Om</h1>\n                            </div>\n                            <h4>Surfkollen är baserad på data hämtad från <a href=\"https://openweathermap.org/api\">OpenWeathers API</a>. Applikationen ska underlätta surfares vardag genom att samla väderdata från Sveriges mest populära surforter i en tjänst. </h4>\n                            <p className=\"credit\">Video, startsida: <a href=\"https://www.pexels.com/@digitech?utm_content=attributionCopyText\">Ruvim Miksanskiy</a> via <a href=\"https://www.pexels.com/\">Pexels</a></p>\n                        </div>\n                    </section>\n                </div>\n            )\n        }\n}\n\nexport default About","import React, { Component } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\n\nexport class Detail extends Component {\n    \n    /* komponentens egenskaper */\n    constructor(props) {\n        super(props);\n        this.state = {\n        isLoaded: true,\n        weatherInfo: [],\n        error: null\n        } \n    }\n\n    /* hämta data */\n    fetchData(id) {\n        fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&units=metric&appid=71ec25abc9fbe273c2375eefd8d36dee&lang=sv`)\n        .then(response => response.json())\n        .then(data => {\n            this.setState ({\n                weatherInfo: data,\n                isLoaded: false,\n            })\n        })\n\n        /* errorhantering */\n        .catch (error =>\n            this.setState ({\n                error,\n                isLoaded: false\n            }))\n        }\n        \n    /* komponent färdigbyggd */\n    componentDidMount() {\n        this.fetchData(this.props.match.params.id)\n    }\n\n\n    render() {\n\n        /* variabler för egenskaperna */\n        const {isLoaded, \n              weatherInfo, \n              error} = this.state;\n        \n        /* variabler för bra/dåliga surfvågor */\n        const goodWave = ' och är en perfekt dag för surf!';\n        const badWave = ' och är tyvärr inga vidare surfvågor idag';\n\n        return (\n\n            /* returnera flera element */\n            <React.Fragment>\n                {/* error */}\n                {error ? <p>{error} Nu blev det fel...</p> : null}\n\n                {/* när innehållet är färdigladdat */}\n                {!isLoaded ? (\n                    <div className=\"main\">\n                        <section>\n                            <div className=\"card\">\n                                <div className=\"card-heading\">\n                                    {/* ortsnamn som visas, byt ut mätplats till specifik plats */}\n                                    {(weatherInfo.name) === 'Visby' ? <h1>Ekeviken</h1> : null}\n                                    {(weatherInfo.name) === 'Varberg' ? <h1>Apelviken</h1> : null}\n                                    {(weatherInfo.name) === 'Höganäs' ? <h1>Mölle</h1> : null}\n                                    {(weatherInfo.name) === 'Husum' ? <h1>Salusand</h1> : null}\n                                    {(weatherInfo.name) === 'Nynäshamn' ? <h1>Torö</h1> : null}\n                                    {(weatherInfo.name) === 'Simrishamn' ? <h1>Vik</h1> : null}\n                                    {(weatherInfo.name) === 'Åsa' ? <h1>Åsa</h1> : null}\n                                </div>\n\n                                {/* vindinformation, villkor för surfvågor */}\n                                <h4>Det blåser <strong>{Math.round((weatherInfo.wind.speed) * 10)/10} m/s</strong>\n                                {(weatherInfo.wind.speed) >= 10 ? goodWave + ' 🏄🏼' : badWave + ' 🙁' }</h4>\n\n                                {/* väderinformation */}\n                                <div className=\"card-weather\">\n                                    <h1>{Math.round(weatherInfo.main.temp)} °c</h1> \n                                    <div className=\"card-icon\"><img src={`http://openweathermap.org/img/wn/${weatherInfo.weather[0].icon}@2x.png`} alt=\"Väderikon\"></img></div>\n                                    <h4>{(weatherInfo.weather[0].description).charAt(0).toUpperCase() + (weatherInfo.weather[0].description).slice(1)}</h4>\n                                </div>\n                                <Link to=\"/\">Tillbaka</Link>\n                            </div>\n                        </section>\n                    </div>\n                \n                /* när sidan laddas */\n                ) : (\n                    <div className=\"main\">\n                        <section>\n                            <h4>Laddar...</h4>\n                        </section>\n                    </div>\n                )}\n            </React.Fragment>\n        )\n    }\n}\n\nexport default withRouter(Detail)","/* react, npm-paket */\nimport { React } from 'react';\nimport { HashRouter as Router, Route, Switch, withRouter } from 'react-router-dom';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\n/* komponenter */\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\n\n/* sidor */\nimport { Places } from './components/pages/Places';\nimport { About } from './components/pages/About';\nimport { Detail } from './components/pages/Detail';\n\n/* stilmall */\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header />\n      {/* routing, animerade sidövergångar */}\n      <div className=\"main\">\n      <Route render={({location}) => (\n        <TransitionGroup>\n          <CSSTransition key={location.pathname}timeout={300} classNames=\"transition\">\n            <Switch location={location}>\n              <Route path=\"/\" exact component={withRouter(Places)} />\n              <Route path=\"/about\" component={withRouter(About)} />\n              <Route path=\"/detail/:id\" component={withRouter(Detail)} />\n            </Switch>\n          </CSSTransition>\n        </TransitionGroup>\n      )} />\n      </div>\n      <Footer />\n     </div>\n  </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}